# /home/lenovo/code/ltphongssvn/ac215e115groupproject/requirements/api-gateway.txt
# API Gateway and Security Requirements for AC215/E115 Group Project
# These packages provide authentication, caching, rate limiting, monitoring, and security
# Required for the API Gateway service that fronts all microservices
# Last updated: 2024-09-17 with monitoring and security additions

# ============================================================================
# CACHING AND SESSION MANAGEMENT
# ============================================================================
redis==5.0.1               # Redis client for caching API responses and storing JWT sessions
                          # Used for 5-minute response cache as specified in API flow docs
                          # Also stores rate limiting counters for SlowAPI

# ============================================================================
# AUTHENTICATION AND SECURITY
# ============================================================================
pyjwt==2.8.0              # Create and validate JSON Web Tokens for API authentication
                          # Implements OAuth2/JWT authentication as required by architecture
                          # Used in API Gateway authentication middleware

passlib[bcrypt]==1.7.4    # Secure password hashing with bcrypt algorithm support
                          # Protects user credentials with industry-standard hashing
                          # Required for user registration and login endpoints

python-multipart==0.0.6   # Required by FastAPI for handling form data in auth flows
                          # Enables OAuth2 password flow with form data submission
                          # Necessary for file uploads in multipart requests

# ============================================================================
# RATE LIMITING AND ABUSE PREVENTION
# ============================================================================
slowapi==0.1.9            # Rate limiting middleware to prevent API abuse
                          # Implements 10 req/min limit for RAG service as specified
                          # Returns 429 status with Retry-After header when exceeded

# ============================================================================
# MONITORING AND OBSERVABILITY
# ============================================================================
prometheus-fastapi-instrumentator==6.1.0  # Automatic metrics collection for FastAPI
                                          # Exposes /metrics endpoint for Prometheus scraping
                                          # Tracks request latency, status codes, and throughput
                                          # Required for Kubernetes HPA autoscaling decisions

prometheus-client==0.22.1                 # Prometheus Python client library
                                          # Dependency of instrumentator, handles metric formatting
                                          # Manages counter, gauge, histogram, and summary metrics

# ============================================================================
# SECURITY HEADERS MIDDLEWARE
# ============================================================================
secure==0.3.0                             # Security headers middleware for OWASP compliance
                                          # Implements CSP, HSTS, X-Frame-Options headers
                                          # Prevents clickjacking, XSS, and MIME sniffing attacks
                                          # Required for Milestone 4.7 Security Audit

# ============================================================================
# LOAD TESTING (DEVELOPMENT/STAGING)
# ============================================================================
locust==2.17.0                            # Load testing framework for API performance verification
                                          # Tests handling of 100 concurrent users (Milestone 4.6)
                                          # Provides web UI for real-time performance monitoring
                                          # Helps optimize Redis cache hit rates and connection pooling

# ============================================================================
# ADDITIONAL DEPENDENCIES AUTOMATICALLY INSTALLED
# ============================================================================
# The following packages are installed automatically as dependencies:
# - bcrypt==4.3.0         # Cryptographic hashing (comes with passlib[bcrypt])
# - limits==5.5.0         # Rate limiting backend (comes with slowapi)
# - flask==3.1.2          # Web framework (comes with locust)
# - gevent==25.9.1        # Async networking library (comes with locust)
# - werkzeug==3.1.3       # WSGI utilities (comes with flask)

# ============================================================================
# INTEGRATION WITH BASE REQUIREMENTS
# ============================================================================
# This file should be used alongside base.txt for complete functionality:
# pip install -r requirements/base.txt -r requirements/api-gateway.txt

# ============================================================================
# DOCKER CONTAINER USAGE
# ============================================================================
# When building the API Gateway Docker container, use:
# COPY requirements/base.txt requirements/api-gateway.txt /app/requirements/
# RUN pip install -r /app/requirements/base.txt -r /app/requirements/api-gateway.txt

# ============================================================================
# EXAMPLE FASTAPI INTEGRATION
# ============================================================================
# Here's how to integrate these packages in your API Gateway:
#
# from fastapi import FastAPI
# from prometheus_fastapi_instrumentator import Instrumentator
# from slowapi import Limiter, _rate_limit_exceeded_handler
# from slowapi.util import get_remote_address
# from slowapi.errors import RateLimitExceeded
# import redis
# import secure
#
# app = FastAPI(title="ERP AI API Gateway")
#
# # Add Prometheus metrics
# Instrumentator().instrument(app).expose(app)
#
# # Add security headers
# secure_headers = secure.SecureHeaders()
#
# @app.middleware("http")
# async def add_security_headers(request, call_next):
#     response = await call_next(request)
#     secure_headers.framework.fastapi(response)
#     return response
#
# # Add rate limiting
# limiter = Limiter(key_func=get_remote_address)
# app.state.limiter = limiter
# app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)
#
# # Connect to Redis
# redis_client = redis.Redis(host='localhost', port=6379, decode_responses=True)

# ============================================================================
# NOTES FOR TEAM MEMBERS
# ============================================================================
# 1. These packages are ONLY needed for the API Gateway service
# 2. Other microservices (NL+SQL, RAG, Forecasting) don't need these
# 3. Redis server must be running (use docker-compose.yml)
# 4. JWT_SECRET environment variable must be set for PyJWT
# 5. Run load tests with: locust -f tests/locustfile.py --host=http://localhost:8000
# 6. View metrics at: http://localhost:8000/metrics
# 7. Security headers will be automatically added to all responses