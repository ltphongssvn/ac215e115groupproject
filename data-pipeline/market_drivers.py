import matplotlib
from pathlib import Path
PROJECT_ROOT = Path(__file__).parent.parent
DATA_DIR = PROJECT_ROOT / "data"
PROCESSED_DATA_DIR = DATA_DIR / "processed"
PROCESSED_DATA_DIR.mkdir(parents=True, exist_ok=True)
from datetime import datetime
matplotlib.use("Agg")  # Non-interactive backend
# -*- coding: utf-8 -*-
"""project rice price.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BKsI7SM37X7x2feakYDg6SAnDuJa8XVo
"""

# --- Dubai/Oman benchmark oil price from World Bank Pink Sheet (Monthly) ---
# Timeframe: 2008-07-01 to 2024-12-31

import io, re, requests
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
matplotlib.use('Agg')  # Non-interactive backend

START = pd.Timestamp("2008-07-01")
END   = pd.Timestamp("2024-12-31")

PINK_URL = (
    "https://thedocs.worldbank.org/en/doc/5d903e848db1d1b83e0ec8f744e55570-0350012021"
    "/related/CMO-Historical-Data-Monthly.xlsx"
)

def download_excel(url: str) -> bytes:
    headers = {"User-Agent": "Mozilla/5.0"}
    r = requests.get(url, headers=headers, timeout=60)
    r.raise_for_status()
    return r.content

def find_date_column(df: pd.DataFrame) -> str:
    # Prefer common names
    for name in ["Period", "Date", "Month", "TIME", "Time"]:
        if name in df.columns:
            return name
    # Otherwise guess by regex (e.g., 1960M01)
    c0 = df.columns[0]
    ser = df[c0].astype(str).str.strip()
    if ser.str.match(r"^\d{4}M\d{2}$").any():
        return c0
    # Fallback to first column
    return c0

def parse_date_column(df: pd.DataFrame, date_col: str) -> pd.Series:
    s = df[date_col].astype(str).str.strip()
    # If format like 'YYYYMmm'
    mask = s.str.match(r"^\d{4}M\d{2}$")
    if mask.any():
        return pd.to_datetime(s.str.replace("M","", regex=False), format="%Y%m", errors="coerce")
    # Otherwise try generic parse
    return pd.to_datetime(s, errors="coerce")

def pick_dubai_oman_column(df: pd.DataFrame) -> str | None:
    # Try exact names first (most Pink Sheets use this)
    preferred = [
        "Crude oil, Dubai",
        "Crude oil, Dubai/Oman",
        "Crude oil, Oman",
        "Dubai/Oman",
        "Dubai"
    ]
    lowcols = {str(c).strip().lower(): c for c in df.columns}
    for name in preferred:
        key = name.lower()
        if key in lowcols:
            return lowcols[key]
    # Otherwise any column mentioning dubai/oman
    for c in df.columns:
        cl = str(c).lower()
        if "dubai" in cl or "oman" in cl:
            return c
    return None

# ---- Load & clean ----
raw = download_excel(PINK_URL)
xls = pd.ExcelFile(io.BytesIO(raw))

# Pick the monthly price sheet heuristically
sheet_candidates = ["Monthly Prices", "Monthly", "Prices", "Data"]
sheet = None
for s in sheet_candidates:
    if s in xls.sheet_names:
        sheet = s
        break
if sheet is None:
    sheet = xls.sheet_names[0]

# Read with header row ~4 (varies slightly but this works for recent files)
df = pd.read_excel(io.BytesIO(raw), sheet_name=sheet, header=4)
df.columns = df.columns.map(lambda x: str(x).strip())

# Some sheets insert a units row right below the header; drop it if detected
if len(df) and (isinstance(df.iloc[0,0], str) and (("$" in df.iloc[0,0]) or ("Index" in df.iloc[0,0]))):
    df = df.iloc[1:].reset_index(drop=True)

# Identify & parse Date
date_col = find_date_column(df)
df["Date"] = parse_date_column(df, date_col)
df = df.dropna(subset=["Date"])

# Pick the Dubai/Oman-like series
price_col = pick_dubai_oman_column(df)
if price_col is None:
    raise RuntimeError(
        "Could not locate a Dubai/Oman oil series. "
        f"Available columns include: {list(df.columns[:25])}"
    )

# Keep only needed columns and coerce numeric
out = df[["Date", price_col]].copy()
out.rename(columns={price_col: "Oil_Dubai_Oman_USD_per_bbl"}, inplace=True)
out["Oil_Dubai_Oman_USD_per_bbl"] = (
    out["Oil_Dubai_Oman_USD_per_bbl"]
    .replace(['...', '…', '..', '.', '-', '--'], np.nan)
    .pipe(pd.to_numeric, errors="coerce")
)

# Filter timeframe and sort
out = out[(out["Date"] >= START) & (out["Date"] <= END)].sort_values("Date").reset_index(drop=True)

# ---- Display ----
print("Series column chosen:", price_col)
print("Rows:", len(out), "| Date range:", out["Date"].min(), "→", out["Date"].max())
print(out.head(10))
print(out.tail(10))

# ---- Plot ----
plt.figure(figsize=(11,4))
plt.plot(out["Date"], out["Oil_Dubai_Oman_USD_per_bbl"])
plt.title("Dubai/Oman Benchmark Oil Price (USD/bbl)")
plt.xlabel("Date")
plt.ylabel("USD per barrel")
plt.tight_layout()
# plt.show()  # Disabled for pipeline
plt.savefig(PROCESSED_DATA_DIR / f"market_factor_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png", dpi=300)
plt.close()

import requests
import pandas as pd
import matplotlib.pyplot as plt

def fetch_inflation(countries, start_year=2008, end_year=2024):
    """Fetch inflation (consumer price, annual %) from World Bank WDI."""
    INDICATOR = "FP.CPI.TOTL.ZG"  # inflation, consumer prices (annual %)
    country_list = ";".join(countries)
    url = (
        f"https://api.worldbank.org/v2/country/{country_list}/indicator/{INDICATOR}"
        f"?date={start_year}:{end_year}&format=json&per_page=20000"
    )
    resp = requests.get(url)
    resp.raise_for_status()
    data = resp.json()
    records = data[1]

    # Normalize nested JSON into DataFrame
    df = pd.json_normalize(records)
    # Extract fields
    df = df[["country.value", "countryiso3code", "date", "value"]].rename(
        columns={
            "country.value": "Country",
            "countryiso3code": "Code",
            "date": "Year",
            "value": "Inflation"
        }
    )
    df["Year"] = pd.to_numeric(df["Year"], errors="coerce").astype(int)
    df["Inflation"] = pd.to_numeric(df["Inflation"], errors="coerce")
    df = df.dropna(subset=["Inflation"])
    return df

def pivot_and_plot(df):
    """Pivot inflation data and plot by country."""
    df_pivot = df.pivot(index="Year", columns="Country", values="Inflation").sort_index()
    print("Inflation pivot head:")
    print(df_pivot.head())
    print("Inflation pivot tail:")
    print(df_pivot.tail())
    df_pivot.plot(figsize=(12, 6), marker="o")
    plt.title("Consumer Price Inflation (annual %) for Asian Countries")
    plt.xlabel("Year")
    plt.ylabel("Inflation (%)")
    plt.grid(True, alpha=0.3)
    plt.legend(title="Country")
    plt.tight_layout()
    # plt.show()  # Disabled for pipeline
    plt.savefig(PROCESSED_DATA_DIR / f"market_factor_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png", dpi=300)
    plt.close()

if __name__ == "__main__":
    # Example countries: India, China, Indonesia, Thailand, Vietnam, Philippines
    countries = ["IN", "CN", "ID", "TH", "VN", "PH"]
    df_inf = fetch_inflation(countries, 2008, 2024)
    pivot_and_plot(df_inf)

import requests
import pandas as pd
import matplotlib.pyplot as plt

def fetch_inflation(countries, start_year=2008, end_year=2024):
    """Fetch inflation (consumer price, annual %) from World Bank WDI."""
    INDICATOR = "FP.CPI.TOTL.ZG"  # inflation, consumer prices (annual %)
    country_list = ";".join(countries)
    url = (
        f"https://api.worldbank.org/v2/country/{country_list}/indicator/{INDICATOR}"
        f"?date={start_year}:{end_year}&format=json&per_page=20000"
    )
    resp = requests.get(url)
    resp.raise_for_status()
    data = resp.json()
    records = data[1]

    # Normalize nested JSON into DataFrame
    df = pd.json_normalize(records)
    df = df[["country.value", "countryiso3code", "date", "value"]].rename(
        columns={
            "country.value": "Country",
            "countryiso3code": "Code",
            "date": "Year",
            "value": "Inflation"
        }
    )
    df["Year"] = pd.to_numeric(df["Year"], errors="coerce").astype(int)
    df["Inflation"] = pd.to_numeric(df["Inflation"], errors="coerce")
    df = df.dropna(subset=["Inflation"])
    return df

def pivot_and_plot(df):
    """Pivot inflation data, compute yearly average across countries, and plot."""
    df_pivot = df.pivot(index="Year", columns="Country", values="Inflation").sort_index()

    # Compute yearly average across all selected countries
    yearly_avg = df.groupby("Year")["Inflation"].mean()
    print("\nYearly Average Inflation (all countries combined):")
    print(yearly_avg.round(2))

    # Plot each country’s inflation
    ax = df_pivot.plot(figsize=(12, 6), marker="o", alpha=0.7)
    # Overlay yearly average
    yearly_avg.plot(ax=ax, color="black", linewidth=2.5, marker="s", label="Yearly Avg (All Countries)")

    plt.title("Consumer Price Inflation (annual %) – Asian Countries & Yearly Average")
    plt.xlabel("Year")
    plt.ylabel("Inflation (%)")
    plt.grid(True, alpha=0.3)
    plt.legend(title="Country / Avg")
    plt.tight_layout()
    # plt.show()  # Disabled for pipeline
    plt.savefig(PROCESSED_DATA_DIR / f"market_factor_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png", dpi=300)
    plt.close()

if __name__ == "__main__":
    # Example countries: India, China, Indonesia, Thailand, Vietnam, Philippines
    countries = ["IN", "CN", "ID", "TH", "VN", "PH"]
    df_inf = fetch_inflation(countries, 2008, 2024)
    pivot_and_plot(df_inf)

import requests
import pandas as pd
import matplotlib.pyplot as plt

def fetch_indicator(countries, indicator, start_year=2008, end_year=2024):
    """Fetch World Bank WDI indicator for given countries and years."""
    country_list = ";".join(countries)
    url = (
        f"https://api.worldbank.org/v2/country/{country_list}/indicator/{indicator}"
        f"?date={start_year}:{end_year}&format=json&per_page=20000"
    )
    resp = requests.get(url)
    resp.raise_for_status()
    data = resp.json()
    records = data[1]

    # Normalize nested JSON into DataFrame
    df = pd.json_normalize(records)
    df = df[["country.value", "countryiso3code", "date", "value"]].rename(
        columns={
            "country.value": "Country",
            "countryiso3code": "Code",
            "date": "Year",
            "value": "Value"
        }
    )
    df["Year"] = pd.to_numeric(df["Year"], errors="coerce").astype(int)
    df["Value"] = pd.to_numeric(df["Value"], errors="coerce")
    df = df.dropna(subset=["Value"])
    return df

def plot_indicator(df, title, ylabel):
    """Plot indicator by country and yearly average."""
    df_pivot = df.pivot(index="Year", columns="Country", values="Value").sort_index()
    yearly_avg = df.groupby("Year")["Value"].mean()

    print(f"\nYearly Average {title}:")
    print(yearly_avg.round(2))

    ax = df_pivot.plot(figsize=(12, 6), marker="o", alpha=0.7)
    yearly_avg.plot(ax=ax, color="black", linewidth=2.5, marker="s",
                    label="Yearly Avg (All Countries)")

    plt.title(f"{title} – Asian Countries & Yearly Average")
    plt.xlabel("Year")
    plt.ylabel(ylabel)
    plt.grid(True, alpha=0.3)
    plt.legend(title="Country / Avg")
    plt.tight_layout()
    # plt.show()  # Disabled for pipeline
    plt.savefig(PROCESSED_DATA_DIR / f"market_factor_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png", dpi=300)
    plt.close()

if __name__ == "__main__":
    countries = ["IN", "CN", "ID", "TH", "VN", "PH"]

    # Inflation
    df_inf = fetch_indicator(countries, "FP.CPI.TOTL.ZG", 2008, 2024)
    plot_indicator(df_inf, "Consumer Price Inflation (annual %)", "Inflation (%)")

    # Population growth
    df_pop = fetch_indicator(countries, "SP.POP.GROW", 2008, 2024)
    plot_indicator(df_pop, "Population Growth (annual %)", "Growth Rate (%)")

import requests
import pandas as pd
import matplotlib.pyplot as plt

def fetch_indicator(countries, indicator, start_year=2008, end_year=2024):
    """Fetch World Bank WDI indicator for given countries and years."""
    country_list = ";".join(countries)
    url = (
        f"https://api.worldbank.org/v2/country/{country_list}/indicator/{indicator}"
        f"?date={start_year}:{end_year}&format=json&per_page=20000"
    )
    resp = requests.get(url)
    resp.raise_for_status()
    data = resp.json()
    records = data[1]

    # Normalize nested JSON into DataFrame
    df = pd.json_normalize(records)
    df = df[["country.value", "countryiso3code", "date", "value"]].rename(
        columns={
            "country.value": "Country",
            "countryiso3code": "Code",
            "date": "Year",
            "value": "Value"
        }
    )
    df["Year"] = pd.to_numeric(df["Year"], errors="coerce").astype(int)
    df["Value"] = pd.to_numeric(df["Value"], errors="coerce")
    df = df.dropna(subset=["Value"])
    return df

def plot_indicator(df, title, ylabel):
    """Plot indicator by country and yearly average."""
    df_pivot = df.pivot(index="Year", columns="Country", values="Value").sort_index()
    yearly_avg = df.groupby("Year")["Value"].mean()

    print(f"\nYearly Average {title}:")
    print(yearly_avg.round(0))  # round to whole people

    ax = df_pivot.plot(figsize=(12, 6), marker="o", alpha=0.7)
    yearly_avg.plot(ax=ax, color="black", linewidth=2.5, marker="s",
                    label="Yearly Avg (All Countries)")

    plt.title(f"{title} – Asian Countries & Yearly Average")
    plt.xlabel("Year")
    plt.ylabel(ylabel)
    plt.grid(True, alpha=0.3)
    plt.legend(title="Country / Avg")
    plt.tight_layout()
    # plt.show()  # Disabled for pipeline
    plt.savefig(PROCESSED_DATA_DIR / f"market_factor_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png", dpi=300)
    plt.close()

if __name__ == "__main__":
    countries = ["IN", "CN", "ID", "TH", "VN", "PH"]

    # Population (total, not growth rate)
    df_pop = fetch_indicator(countries, "SP.POP.TOTL", 2008, 2024)
    plot_indicator(df_pop, "Total Population", "Population (people)")

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def fetch_nino34(start_year=2008, end_year=2024):
    url = "https://psl.noaa.gov/data/correlation/nina34.data"

    df = pd.read_fwf(url, skiprows=1, widths=[5] + [7]*12, header=None)
    df = df.rename(columns={0: "Year", 1:"Jan", 2:"Feb", 3:"Mar", 4:"Apr", 5:"May", 6:"Jun",
                            7:"Jul", 8:"Aug", 9:"Sep", 10:"Oct", 11:"Nov", 12:"Dec"})

    df = df.melt(id_vars=["Year"], var_name="Month", value_name="Anomaly")
    df["Anomaly"] = pd.to_numeric(df["Anomaly"], errors="coerce").replace(-99.99, np.nan)
    df["Year"] = pd.to_numeric(df["Year"], errors="coerce").astype("Int64")
    df["Month"] = df["Month"].astype(str).str.strip().str[:3]
    df["Date"] = pd.to_datetime(df["Year"].astype(str) + df["Month"], format="%Y%b", errors="coerce")

    df = df.dropna(subset=["Date", "Anomaly"]).sort_values("Date").reset_index(drop=True)

    # 🔹 Filter to requested range
    df = df[(df["Date"].dt.year >= start_year) & (df["Date"].dt.year <= end_year)]

    return df

def plot_nino34(df):
    plt.figure(figsize=(14,6))
    plt.plot(df["Date"].values, df["Anomaly"].values, label="Niño 3.4 SST Anomaly", color="tab:blue")
    plt.axhline(0, color="black", linestyle="--")
    plt.axhline(0.5, color="red", linestyle="--", alpha=0.6, label="El Niño threshold (+0.5°C)")
    plt.axhline(-0.5, color="green", linestyle="--", alpha=0.6, label="La Niña threshold (−0.5°C)")
    plt.title("Niño 3.4 Index (ENSO) [2008–2024]")
    plt.xlabel("Date")
    plt.ylabel("SST Anomaly (°C)")
    plt.legend()
    plt.grid(alpha=0.3)
    plt.tight_layout()
    # plt.show()  # Disabled for pipeline
    plt.savefig(PROCESSED_DATA_DIR / f"market_factor_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png", dpi=300)
    plt.close()

if __name__ == "__main__":
    df_enso = fetch_nino34(2008, 2024)
    print(df_enso.head())
    print(df_enso.tail())
    plot_nino34(df_enso)

import pandas as pd
import matplotlib.pyplot as plt

def fetch_fertilizer_prices(start_year=2008, end_year=2024):
    url = "https://thedocs.worldbank.org/en/doc/5d903e848db1d1b83e0ec8f744e55570-0350012021/related/CMO-Historical-Data-Monthly.xlsx"

    # Read the Excel sheet
    df = pd.read_excel(url, sheet_name="Monthly Prices", skiprows=4)

    # Rename first column to Date
    df = df.rename(columns={df.columns[0]: "Date"})
    df.columns = df.columns.str.strip()

    # Fertilizer columns we want
    fert_cols = ["DAP", "TSP", "Urea", "Phosphate rock", "Potassium chloride **"]

    # Keep only relevant
    df = df[["Date"] + fert_cols]

    # ✅ Parse Date (values look like "1960M01")
    df["Date"] = pd.to_datetime(df["Date"].astype(str), format="%YM%m", errors="coerce")

    # Convert fertilizer values
    for col in fert_cols:
        df[col] = pd.to_numeric(df[col], errors="coerce")

    # Filter timeframe
    df = df[(df["Date"].dt.year >= start_year) & (df["Date"].dt.year <= end_year)]

    return df.dropna(how="all")

def plot_fertilizer_prices(df):
    df.set_index("Date").plot(figsize=(12,6))
    plt.title("Fertilizer Prices (US$/mt) [2008–2024]")
    plt.ylabel("US$/metric ton")
    plt.grid(alpha=0.3)
    plt.tight_layout()
    # plt.show()  # Disabled for pipeline
    plt.savefig(PROCESSED_DATA_DIR / f"market_factor_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png", dpi=300)
    plt.close()

if __name__ == "__main__":
    fert_df = fetch_fertilizer_prices(2008, 2024)
    print(fert_df.head(12))
    plot_fertilizer_prices(fert_df)

# - Oil (Dubai/Oman benchmark, monthly, World Bank Pink Sheet)
# - Inflation (Asia avg, 2 variants, annual → monthly)
# - Population growth (Asia avg, annual → monthly)
# - Population total (Asia avg, annual → monthly)
# - ENSO Niño 3.4 index (monthly, NOAA)
# - Fertilizer composite (monthly, Pink Sheet)

import io, requests, pandas as pd, numpy as np, matplotlib.pyplot as plt

START = pd.Timestamp("2008-07-01")
END   = pd.Timestamp("2024-12-31")


def _enforce_monthly(s: pd.Series) -> pd.Series:
    """Ensure monthly start (MS) index and trim NaNs."""
    s = s[~s.index.duplicated(keep="last")].sort_index()
    s = s.resample("MS").mean()
    return s.loc[s.first_valid_index(): s.last_valid_index()]

def _annual_to_monthly(df_yearly: pd.DataFrame, col: str, name: str) -> pd.Series:
    """Convert annual data to monthly by interpolation."""
    df = df_yearly.dropna(subset=[col]).sort_values("Year")
    idx = pd.to_datetime(df["Year"].astype(str) + "-01-01")
    s = pd.Series(df[col].values, index=idx, name=name)
    s = s.resample("MS").asfreq().interpolate(method="time")
    return s[(s.index >= START) & (s.index <= END)]

def _align_and_plot(series_list):
    """Align all series to the densest one and plot separately."""
    counts = [s.notna().sum() for s in series_list]
    master = series_list[int(np.argmax(counts))].index
    union_idx = master
    for s in series_list:
        union_idx = union_idx.union(s.index)
    wide = pd.concat(series_list, axis=1).reindex(union_idx).sort_index()
    wide = wide.interpolate(method="time", limit_direction="both")
    aligned = wide.reindex(master)

    for col in aligned.columns:
        plt.figure()
        aligned[col].plot(title=f"{col} (Monthly, aligned)", grid=True)
        # plt.show()  # Disabled for pipeline
        plt.savefig(PROCESSED_DATA_DIR / f"market_factor_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png", dpi=300)
        plt.close()

# ---------------------------
# 1) Oil (Dubai/Oman, Pink Sheet)
# ---------------------------

def load_dubai_oman_oil() -> pd.Series:
    url = "https://thedocs.worldbank.org/en/doc/5d903e848db1d1b83e0ec8f744e55570-0350012021/related/CMO-Historical-Data-Monthly.xlsx"
    r = requests.get(url, timeout=60); r.raise_for_status()
    xls = pd.ExcelFile(io.BytesIO(r.content))
    sheet = next((s for s in ["Monthly Prices","Monthly","Prices","Data"] if s in xls.sheet_names), xls.sheet_names[0])
    df = pd.read_excel(io.BytesIO(r.content), sheet_name=sheet, header=4)
    df.columns = df.columns.map(str.strip)

    # Drop units row if present
    if isinstance(df.iloc[0,0], str) and ("$" in df.iloc[0,0] or "Index" in df.iloc[0,0]):
        df = df.iloc[1:].reset_index(drop=True)

    # Find date column (fallback = first col)
    date_candidates = [c for c in df.columns if "date" in c.lower() or "period" in c.lower() or "time" in c.lower()]
    date_col = date_candidates[0] if date_candidates else df.columns[0]

    raw_date = df[date_col].astype(str).str.strip()
    if raw_date.str.match(r"^\d{4}M\d{2}$").any():
        df["Date"] = pd.to_datetime(raw_date.str.replace("M",""), format="%Y%m", errors="coerce")
    else:
        df["Date"] = pd.to_datetime(raw_date, errors="coerce")
    df = df.dropna(subset=["Date"])

    # Pick Dubai/Oman column
    candidates = [c for c in df.columns if any(k in c.lower() for k in ["dubai","oman"])]
    if not candidates:
        raise RuntimeError(f"No Dubai/Oman column found. Available: {df.columns[:15].tolist()}")
    col = candidates[0]

    df[col] = pd.to_numeric(df[col], errors="coerce")
    out = df[["Date", col]].dropna()
    s = pd.Series(out[col].values, index=out["Date"], name="Oil_Dubai_Oman_USD_per_bbl")
    return _enforce_monthly(s[(s.index>=START)&(s.index<=END)])

# ---------------------------
# 2) Inflation (annual % → monthly)
# ---------------------------

def load_inflation_avg(countries=["IN","CN","ID","TH","VN","PH"]) -> pd.Series:
    IND = "FP.CPI.TOTL.ZG"
    url = f"https://api.worldbank.org/v2/country/{';'.join(countries)}/indicator/{IND}?date={START.year}:{END.year}&format=json&per_page=20000"
    df = pd.json_normalize(requests.get(url).json()[1])
    df["Year"] = df["date"].astype(int)
    df["Inflation"] = pd.to_numeric(df["value"], errors="coerce")
    yearly = df.groupby("Year")["Inflation"].mean().reset_index()
    return _annual_to_monthly(yearly, "Inflation", "Inflation_Asia_Avg")

# ---------------------------
# 3) Population growth (annual %)
# ---------------------------

def load_population_growth(countries=["IN","CN","ID","TH","VN","PH"]) -> pd.Series:
    IND = "SP.POP.GROW"
    url = f"https://api.worldbank.org/v2/country/{';'.join(countries)}/indicator/{IND}?date={START.year}:{END.year}&format=json&per_page=20000"
    df = pd.json_normalize(requests.get(url).json()[1])
    df["Year"] = df["date"].astype(int)
    df["Value"] = pd.to_numeric(df["value"], errors="coerce")
    yearly = df.groupby("Year")["Value"].mean().reset_index()
    return _annual_to_monthly(yearly, "Value", "Population_Growth_Asia_Avg")

# ---------------------------
# 4) Population total (people)
# ---------------------------

def load_population_total(countries=["IN","CN","ID","TH","VN","PH"]) -> pd.Series:
    IND = "SP.POP.TOTL"
    url = f"https://api.worldbank.org/v2/country/{';'.join(countries)}/indicator/{IND}?date={START.year}:{END.year}&format=json&per_page=20000"
    df = pd.json_normalize(requests.get(url).json()[1])
    df["Year"] = df["date"].astype(int)
    df["Value"] = pd.to_numeric(df["value"], errors="coerce")
    yearly = df.groupby("Year")["Value"].mean().reset_index()
    return _annual_to_monthly(yearly, "Value", "Population_Total_Asia_Avg")

# ---------------------------
# 5) ENSO Niño 3.4 (monthly)
# ---------------------------

def load_nino34() -> pd.Series:
    url = "https://psl.noaa.gov/data/correlation/nina34.data"
    df = pd.read_fwf(url, skiprows=1, widths=[5]+[7]*12, header=None)
    df = df.rename(columns={0:"Year",1:"Jan",2:"Feb",3:"Mar",4:"Apr",5:"May",6:"Jun",7:"Jul",8:"Aug",9:"Sep",10:"Oct",11:"Nov",12:"Dec"})
    df = df.melt(id_vars=["Year"], var_name="Month", value_name="Anomaly")
    df["Date"] = pd.to_datetime(df["Year"].astype(str)+df["Month"], format="%Y%b", errors="coerce")
    df["Anomaly"] = pd.to_numeric(df["Anomaly"], errors="coerce").replace(-99.99, np.nan)
    s = pd.Series(df["Anomaly"].values, index=df["Date"], name="Nino3.4_SST_Anomaly")
    return _enforce_monthly(s[(s.index>=START)&(s.index<=END)])

# ---------------------------
# 6) Fertilizer composite (monthly, Pink Sheet)
# ---------------------------

def load_fertilizer() -> pd.Series:
    url = "https://thedocs.worldbank.org/en/doc/5d903e848db1d1b83e0ec8f744e55570-0350012021/related/CMO-Historical-Data-Monthly.xlsx"
    df = pd.read_excel(url, sheet_name="Monthly Prices", skiprows=4)
    df = df.rename(columns={df.columns[0]:"Date"}); df.columns = df.columns.str.strip()
    fert_cols = [c for c in ["DAP","TSP","Urea","Phosphate rock","Potassium chloride **"] if c in df.columns]
    df["Date"] = pd.to_datetime(df["Date"].astype(str), format="%YM%m", errors="coerce")
    for c in fert_cols: df[c] = pd.to_numeric(df[c], errors="coerce")
    df["Composite"] = df[fert_cols].mean(axis=1, skipna=True)
    s = pd.Series(df["Composite"].values, index=df["Date"], name="Fertilizer_Composite")
    return _enforce_monthly(s[(s.index>=START)&(s.index<=END)])

# ---------------------------
# Main
# ---------------------------

def main():
    loaders = [
        load_dubai_oman_oil,
        load_inflation_avg,
        load_population_growth,
        load_population_total,
        load_nino34,
        load_fertilizer
    ]
    series_list = []
    for fn in loaders:
        try:
            s = fn(); series_list.append(s)
            print(f"Loaded {s.name} ({len(s)} pts)")
        except Exception as e:
            print(f"Error loading {fn.__name__}: {e}")
    if series_list:
        _align_and_plot(series_list)

if __name__ == "__main__":
    main()