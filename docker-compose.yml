# File path: ~/code/ltphongssvn/ac215e115groupproject/docker-compose.yml
# Docker Compose configuration for Rice Market AI System local development
# This setup provides a complete development environment with PostgreSQL, Redis, and admin tools

version: '3.8'

services:
  # PostgreSQL database - Primary data store for the Rice Market application
  postgres:
    image: postgres:15-alpine
    container_name: rice_market_postgres
    environment:
      # Database credentials - Using simple password for local dev only
      POSTGRES_USER: rice_admin
      POSTGRES_PASSWORD: localdev123
      POSTGRES_DB: rice_market_db
      
      # PostgreSQL initialization settings
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
      
      # Performance tuning matching production settings
      POSTGRES_MAX_CONNECTIONS: 100
      POSTGRES_SHARED_BUFFERS: 256MB
    
    ports:
      - "5433:5432"  # Exposed on 5433 to avoid conflicts with local PostgreSQL
    
    volumes:
      # Mount initialization SQL script as read-only
      - ./data-pipeline/schema/postgresql_ddl.sql:/docker-entrypoint-initdb.d/01_schema.sql:ro
      # Persistent data storage
      - postgres_data:/var/lib/postgresql/data
    
    # Enable query performance monitoring and detailed logging for development
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c log_statement=all
      -c log_duration=on
    
    # Health check ensures database is ready before dependent services start
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rice_admin -d rice_market_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    networks:
      - rice_market_network

  # Redis cache and session store - Provides high-speed data access
  redis:
    image: redis:7-alpine
    container_name: rice_market_redis
    ports:
      - "6380:6379"  # Exposed on 6380 to avoid conflicts with local Redis
    
    volumes:
      - redis_data:/data  # Persistent storage for Redis snapshots
    
    # Health check ensures Redis is responsive
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    networks:
      - rice_market_network

  # pgAdmin - Web-based PostgreSQL management interface
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: rice_market_pgadmin
    environment:
      # pgAdmin configuration for local development
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'  # Desktop mode for single user
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'  # Simplified for dev
    
    ports:
      - "5050:80"  # Access pgAdmin at http://localhost:5050
    
    volumes:
      - pgadmin_data:/var/lib/pgadmin  # Persist pgAdmin configuration
    
    networks:
      - rice_market_network

  # Adminer - Lightweight database management interface
  adminer:
    image: adminer:latest
    container_name: rice_market_adminer
    environment:
      ADMINER_DEFAULT_SERVER: postgres  # Auto-connect to postgres service
      ADMINER_DESIGN: pepa-linha  # Modern UI theme
    
    ports:
      - "8081:8080"  # Access Adminer at http://localhost:8081
    
    networks:
      - rice_market_network

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

# Custom network for service communication
networks:
  rice_market_network:
    driver: bridge
    # The bridge driver creates an isolated network where services
    # can communicate using their service names as hostnames
